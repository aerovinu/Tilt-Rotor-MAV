function [n,alphadot] = Quadcopter_tilted_arms_control(kf, km, L,m,Ib, wRb, wRbdot,pdotdoterr, pdoterr, perr, wbdoterr, wberr, Rd, alpha,beta, theta, n, nmax, nmin, nhover, dt)
%QUADCOPTER_TILTED_ARMS_CONTROL Summary of this function goes here
%   Detailed explanation goes here
%% control as voliro

%% Desired output:
K1 = 1*eye(3);
K2 = 1*eye(3);
K3 = 1*eye(3);
Fdes = K1*pdotdoterr + K2*pdoterr + K3*perr;
er = skewcoords((wRb.'*Rd -Rd.'*wRb)/2);
Mdes = K1*wbdoterr + K2*wberr + K3*er;

A_F_static = [sin(beta(1))*cos(theta(1)), sin(theta(1)), -sin(beta(2))*sin(theta(2)), ...
              cos(theta(2)), -sin(beta(3))*cos(theta(3)), -sin(theta(3)), ...
              sin(beta(4))*sin(theta(4)), -cos(theta(4)); ...
              sin(beta(1))*sin(theta(1)), -cos(theta(1)), sin(beta(2))*cos(theta(2)), ...
              sin(theta(2)), -sin(beta(3))*sin(theta(3)), cos(theta(3)), ...
              -sin(beta(4))*cos(theta(4)), -sin(theta(4)); ...
              cos(beta(1)), 0, cos(beta(2)), 0,  cos(beta(3)), 0, cos(beta(4)), 0];


A_M_static =[L*sin(theta(1))-km*sin(beta(1))*cos(theta(1))/kf, -L*sin(beta(1))*cos(theta(1))-km*sin(theta(1))/kf, ...
             L*cos(theta(2))-km*sin(beta(2))*sin(theta(2))/kf, L*sin(beta(2))*sin(theta(2))+km*cos(theta(2))/kf, ...
             -L*sin(theta(3))+km*sin(beta(3))*cos(theta(3))/kf, L*sin(beta(3))*cos(theta(3))+km*sin(theta(3))/kf, ...
             -L*cos(theta(4))-km*sin(beta(4))*sin(theta(4))/kf, -L*sin(beta(4))*sin(theta(4))-km*cos(theta(4))/kf; ...
             -L*cos(theta(1))-km*sin(beta(1))*sin(theta(1))/kf, -L*sin(beta(1))*sin(theta(1))+km*cos(theta(1))/kf, ...
             L*sin(theta(2))+km*sin(beta(2))*cos(theta(2))/kf, -L*sin(beta(2))*cos(theta(2))+km*sin(theta(2))/kf, ...
             L*cos(theta(3))+km*sin(beta(3))*sin(theta(3))/kf, L*sin(beta(3))*sin(theta(3))-km*cos(theta(3))/kf, ...
             -L*sin(theta(4))-km*sin(beta(4))*cos(theta(4))/kf, L*sin(beta(4))*cos(theta(4))-km*sin(theta(4))/kf; ...
             -km*cos(beta(1))/kf, -L*cos(beta(1)), km*cos(beta(2))/kf, -L*cos(beta(2)), -km*cos(beta(3))/kf, ...
             -L*cos(beta(3)), km*cos(beta(4))/kf, -L*cos(beta(4))];

Astatic = [A_F_static; A_M_static];
Astatict = pinv(Astatic);
Fdec = Astatict*[Fdes;Mdes];
n = [1/kf*sqrt(Fdec(1)^2 + Fdec(2)^2); 1/kf*sqrt(Fdec(3)^2 + Fdec(4)^2); 1/kf*sqrt(Fdec(5)^2 + Fdec(6)^2); 1/kf*sqrt(Fdec(7)^2 + Fdec(8)^2)];
n = n/vecnorm(n);
n = nmax^2*n/max(n); % 0 <= nstar <= nmax
n(n<nmin) = nmin;
n = sqrt(n);
alpha1 = [atan2(Fdec(2),Fdec(1)) atan2(Fdec(4),Fdec(3)) atan2(Fdec(6),Fdec(5)) atan2(Fdec(8),Fdec(7))];
alpha1 = round(10^5*alpha1)/10^5;
alphadot =  (alpha1-alpha)/dt;

%% control as in paper 8 (not quite working here)
% JR = [wRb/m, zeros(3,3); zeros(3,3), inv(Ib)];
% 
% 
% Falpha = [kf*cos(alpha(1))*sin(beta(1))*cos(theta(1))+kf*sin(alpha(1))*sin(theta(1)), ...
%           -kf*cos(alpha(2))*sin(beta(2))*sin(theta(2))+kf*sin(alpha(2))*cos(theta(2)), ...
%           -kf*cos(alpha(3))*sin(beta(3))*cos(theta(3))-kf*sin(alpha(3))*sin(theta(3)), ...
%           kf*cos(alpha(4))*sin(beta(4))*sin(theta(4))-kf*sin(alpha(4))*cos(theta(4)); ...
%           kf*cos(alpha(1))*sin(beta(1))*sin(theta(1))-kf*sin(alpha(1))*cos(theta(1)), ...
%           kf*cos(alpha(2))*sin(beta(2))*cos(theta(2))+kf*sin(alpha(2))*sin(theta(2)), ...
%           -kf*cos(alpha(3))*sin(beta(3))*sin(theta(3))+kf*sin(alpha(3))*cos(theta(3)), ...
%           -kf*cos(alpha(4))*sin(beta(4))*cos(theta(4))-kf*sin(alpha(4))*sin(theta(4)); ...
%           kf*cos(alpha(1))*cos(beta(1)), kf*cos(alpha(2))*cos(beta(2)), ...
%           kf*cos(alpha(3))*cos(beta(3)), kf*cos(alpha(4))*cos(beta(4))];
% 
% 
% 
% Taualpha =[L*kf*cos(alpha(1))*sin(theta(1))-km*cos(alpha(1))*sin(beta(1))*cos(theta(1))-L*kf*sin(alpha(1))*sin(beta(1))*cos(theta(1))-km*sin(alpha(1))*sin(theta(1)), ...
%              L*kf*cos(alpha(2))*cos(theta(2))-km*cos(alpha(2))*sin(beta(2))*sin(theta(2))+L*kf*sin(alpha(2))*sin(beta(2))*sin(theta(2))+km*sin(alpha(2))*cos(theta(2)), ...
%              -L*kf*cos(alpha(3))*sin(theta(3))+km*cos(alpha(3))*sin(beta(3))*cos(theta(3))+L*kf*sin(alpha(3))*sin(beta(3))*cos(theta(3))+km*sin(alpha(3))*sin(theta(3)), ...
%              -L*kf*cos(alpha(4))*cos(theta(4))-km*cos(alpha(4))*sin(beta(4))*sin(theta(4))-L*kf*sin(alpha(4))*sin(beta(4))*sin(theta(4))-km*sin(alpha(4))*cos(theta(4)); ...
%              -L*kf*cos(alpha(1))*cos(theta(1))-km*cos(alpha(1))*sin(beta(1))*sin(theta(1))-L*kf*sin(alpha(1))*sin(beta(1))*sin(theta(1))+km*sin(alpha(1))*cos(theta(1)), ...
%              L*kf*cos(alpha(2))*sin(theta(2))+km*cos(alpha(2))*sin(beta(2))*cos(theta(2))-L*kf*sin(alpha(2))*sin(beta(2))*cos(theta(2))+km*sin(alpha(2))*sin(theta(2)), ...
%              L*kf*cos(alpha(3))*cos(theta(3))+km*cos(alpha(3))*sin(beta(3))*sin(theta(3))+L*kf*sin(alpha(3))*sin(beta(3))*sin(theta(3))-km*sin(alpha(3))*cos(theta(3)), ...
%              -L*kf*cos(alpha(4))*sin(theta(4))-km*cos(alpha(4))*sin(beta(4))*cos(theta(4))+L*kf*sin(alpha(4))*sin(beta(4))*cos(theta(4))-km*sin(alpha(4))*sin(theta(4)); ...
%              -km*cos(alpha(1))*cos(beta(1))-L*kf*sin(alpha(1))*cos(beta(1)), km*cos(alpha(2))*cos(beta(2))-L*kf*sin(alpha(2))*cos(beta(2)), ...
%              -km*cos(alpha(3))*cos(beta(3))-L*kf*sin(alpha(3))*cos(beta(3)), km*cos(alpha(4))*cos(beta(4))-L*kf*sin(alpha(4))*cos(beta(4))];
%          
% jbardot1 = [-kf*sin(alpha(1))*sin(beta(1))*cos(theta(1))+kf*cos(alpha(1))*sin(theta(1)); ...
%             -kf*sin(alpha(1))*sin(beta(1))*sin(theta(1))-kf*cos(alpha(1))*cos(theta(1)); ...
%             -kf*sin(alpha(1))*cos(beta(1)); ...
%             -L*kf*sin(alpha(1))*sin(theta(1))+km*sin(alpha(1))*sin(beta(1))*cos(theta(1))-L*kf*cos(alpha(1))*sin(beta(1))*cos(theta(1))-km*cos(alpha(1))*sin(theta(1)); ...
%             L*kf*sin(alpha(1))*cos(theta(1))+km*sin(alpha(1))*sin(beta(1))*sin(theta(1))-L*kf*cos(alpha(1))*sin(beta(1))*sin(theta(1))+km*cos(alpha(1))*cos(theta(1)); ...
%             km*sin(alpha(1))*cos(beta(1))-L*kf*cos(alpha(1))*cos(beta(1))];
%         
% jbardot2 = [kf*sin(alpha(2))*sin(beta(2))*sin(theta(2))+kf*cos(alpha(2))*cos(theta(2)); ...
%             -kf*sin(alpha(2))*sin(beta(2))*cos(theta(2))+kf*cos(alpha(2))*sin(theta(2)); ...
%             -kf*sin(alpha(2))*cos(beta(2)); ...
%             -L*kf*sin(alpha(2))*cos(theta(2))+km*sin(alpha(2))*sin(beta(2))*sin(theta(2))+L*kf*cos(alpha(2))*sin(beta(2))*sin(theta(2))+km*cos(alpha(2))*cos(theta(2)); ...
%             -L*kf*sin(alpha(2))*sin(theta(2))-km*sin(alpha(2))*sin(beta(2))*cos(theta(2))-L*kf*cos(alpha(2))*sin(beta(2))*cos(theta(2))+km*cos(alpha(2))*sin(theta(2)); ...
%             -km*sin(alpha(2))*cos(beta(2))-L*kf*cos(alpha(2))*cos(beta(2))];
%         
% jbardot3 = [kf*sin(alpha(3))*sin(beta(3))*cos(theta(3))-kf*cos(alpha(3))*sin(theta(3)); ...
%             kf*sin(alpha(3))*sin(beta(3))*sin(theta(3))+kf*cos(alpha(3))*cos(theta(3)); ...
%             -kf*sin(alpha(3))*cos(beta(3)); ...
%             L*kf*sin(alpha(3))*sin(theta(3))-km*sin(alpha(3))*sin(beta(3))*cos(theta(3))+L*kf*cos(alpha(3))*sin(beta(3))*cos(theta(3))+km*cos(alpha(3))*sin(theta(3)); ...
%             -L*kf*sin(alpha(3))*cos(theta(3))-km*sin(alpha(3))*sin(beta(3))*sin(theta(3))+L*kf*cos(alpha(3))*sin(beta(3))*sin(theta(3))-km*cos(alpha(3))*cos(theta(3)); ...
%             km*sin(alpha(3))*cos(beta(3))-L*kf*cos(alpha(3))*cos(beta(3))];
%       
% jbardot4 = [-kf*sin(alpha(4))*sin(beta(4))*sin(theta(4))-kf*cos(alpha(4))*cos(theta(4)); ...
%             kf*sin(alpha(4))*sin(beta(4))*cos(theta(4))-kf*cos(alpha(4))*sin(theta(4)); ...
%             -kf*sin(alpha(4))*cos(beta(4)); ...
%             L*kf*sin(alpha(4))*cos(theta(4))+km*sin(alpha(4))*sin(beta(4))*sin(theta(4))-L*kf*cos(alpha(4))*sin(beta(4))*sin(theta(4))-km*cos(alpha(4))*cos(theta(4)); ...
%             L*kf*sin(alpha(4))*sin(theta(4))+km*sin(alpha(4))*sin(beta(4))*cos(theta(4))+L*kf*cos(alpha(4))*sin(beta(4))*cos(theta(4))-km*cos(alpha(4))*sin(theta(4)); ...
%             -km*sin(alpha(4))*cos(beta(4))-L*kf*cos(alpha(4))*cos(beta(4))];
%         
% % jbardot = jbardot1+jbardot2+jbardot3+jbardot4;
%     
% Jbar = [Falpha; Taualpha];
% 
% Jalpha = [Jbar, jbardot1.*n(1)^2, jbardot2.*n(2)^2, jbardot3.*n(3)^2, jbardot4.*n(4)^2];
% 
% A = JR*Jalpha;
% 
% At = pinv(A);
% 
% b = [wRbdot*(Falpha*n.^2)/m;zeros(3,1)];
% %% Desired output:
% K1 = 7.5*eye(3);
% K2 = 18.75*eye(3);
% K3 = 15.62*eye(3);
% PtripledotR = K1*pdotdoterr + K2*pdoterr + K3*perr;
% er = skewcoords((wRb.'*Rd -Rd.'*wRb)/2);
% wrdotdotR = K1*wbdoterr + K2*wberr + K3*er;
% 
% %% Exploit null space of A to minimize rotor speed
% % n in rad/s:
% n = 2*pi*n;
% nmax = 2*pi*nmax;
% nmin = 2*pi*nmin;
% nhover = 2*pi*nhover;
% gamma1 = pi/(2*(nhover - nmin));
% gamma2 = -gamma1*nhover;
% kh1 = 1;
% kh2 = 0.000001;
% h = [];
% for i = 1:4
%     if n(i) >= nhover
%         h = [h (2*kh2*(n(i) - nhover)-2*(n(i) - nhover)/(n(i) - nmax)+(n(i) - nhover)^2/(n(i) - nmax)^2)];
% %         h(i) = kh2*(n(i)^2 - nhover^2)^2-(n(i)^2 - nhover^2)^2/(n(i)^2 - nmax^2);
%     else 
%         h = [h (2*kh1*gamma1*tan(gamma1*n(i) + gamma2)/cos(gamma1*n(i) + gamma2)^2)];
% %         h(i) = kh1*tan(gamma1*n(i)^2 + gamma2)^2;
%     end
% end
% h(find(h>500)) = 500;
% h(find(h<-500)) = -500;
% Z = -[h(1)^2;h(2)^2;h(3)^2;h(4)^2;0;0;0;0];
% %% find control input:
% Null = (eye(8) - At*A);
% control_input =   At*([PtripledotR; wrdotdotR]-b) +Null*Z;
% nsquaredot = control_input(1:4);
% alphadot= control_input(5:8);

end

